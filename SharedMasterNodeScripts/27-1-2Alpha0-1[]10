from dash import DashCoreRPC, CTransaction, CTxIn, CTxOut, CScript, OP_HASH160, hex_str_to_bytes, OP_EQUAL
import hashlib
import sys
import dashrpc
from dashrpc.exceptions import DashRPCException
import dashcore

# Global variable to store masternode status
masternode_status = {
    'total_collateral': 0,
    'protx_hash': None,
    'operator_pubkey': None,
    'voting_pubkey': None,
    'operator_reward': 0,
    'participants': [],
}

participants = {}  # Dictionary to store participant data

# Function to connect to Dash RPC
def connect_to_dash_rpc():
    try:
        # Initialize your Dash RPC client with connection details
        rpc_connection = DashCoreRPC(
            rpcuser='your_rpc_username',
            rpcpassword='your_rpc_password',
            rpcport=your_rpc_port,
            rpchost='your_rpc_host'
        )

        # Test the connection
        info = rpc_connection.getinfo()
        if 'version' in info:
            print("Connected to Dash RPC Server")
            return rpc_connection
        else:
            print("Failed to connect to Dash RPC Server")
            return None
    except Exception as e:
        print(f"Connection error: {str(e)}")
        return None

# Function to create a transaction
def create_transaction(inputs, outputs):
    tx = CTransaction()
    for input_data in inputs:
        txin = CTxIn(input_data['prev_tx'], input_data['prev_output_index'])
        tx.vin.append(txin)
    for address, amount in outputs.items():
        txout = CTxOut(amount, CScript([OP_HASH160, hex_str_to_bytes(address), OP_EQUAL]))
        tx.vout.append(txout)
    return tx

# Function to broadcast a transaction
def broadcast_transaction(tx, rpc_connection):
    try:
        tx_hex = tx.serialize().hex()
        result = rpc_connection.sendrawtransaction(tx_hex)
        if result:
            print(f"Transaction successfully broadcasted. Transaction ID: {result}")
            return True
        else:
            print("Failed to broadcast the transaction.")
            return False
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return False

# Function to calculate the protx hash
def calculate_protx_hash(serialized_mn_reg_tx):
    tx_bytes = bytes.fromhex(serialized_mn_reg_tx)
    tx_hash = hashlib.sha256(tx_bytes).digest()
    protx_hash = hashlib.sha256(tx_hash).hexdigest()
    return protx_hash

# Function for participants to deposit collateral
def deposit_collateral():
    participant_pubkey = input("Enter your public key: ")
    collateral_amount = float(input("Enter your collateral amount (in DASH): "))
    participants[participant_pubkey] = {'collateral_amount': collateral_amount}
    print(f"Collateral of {collateral_amount} DASH deposited for participant {participant_pubkey}")

# Function to check collateral (Participant)
def check_collateral():
    global masternode_status
    try:
        print(f"Your collateral: {masternode_status['total_collateral']} DASH")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Function to combine participants' collateral by the operator
def combine_participants_collateral():
    total_collateral = sum(participant['collateral_amount'] for participant in participants.values())
    if total_collateral >= required_total_collateral:
        tx = create_transaction([], {multisig_address: total_collateral})
        if broadcast_transaction(tx, rpc_connection):
            print(f"Combined {total_collateral} collateral from participants into multisig address {multisig_address}")
            participants.clear()
            return True
        else:
            print("Failed to broadcast the transaction.")
            return False
    else:
        print("Total collateral is insufficient for masternode setup.")
        return False

# Function to create a redemption transaction (Participant)
def create_redemption_transaction():
    global masternode_status
    try:
        print("Redemption transaction created successfully.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Function for participants to withdraw their collateral
def withdraw_collateral():
    participant_pubkey = input("Enter your public key: ")
    if participant_pubkey not in participants:
        print("Participant not found.")
        return
    collateral_amount = participants[participant_pubkey]['collateral_amount']
    withdrawal_address = input("Enter the Dash address to receive your collateral: ")

    if collateral_amount > 0:
        tx = create_transaction([], {withdrawal_address: collateral_amount})
        if broadcast_transaction(tx, rpc_connection):
            print(f"Withdrawn {collateral_amount} DASH from participant {participant_pubkey}")
            del participants[participant_pubkey]
        else:
            print("Failed to broadcast the withdrawal transaction.")
    else:
        print("No collateral to withdraw for this participant.")

# Function to check confirmations (Participant)
def check_confirmations():
    global masternode_status
    try:
        print("Confirmations checked.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Function to create Masternode Registration Transaction (Operator)
def create_masternode_registration():
    global masternode_status
    operator_pubkey = input("Enter your operator public key: ")
    voting_pubkey = input("Enter the voting public key: ")

    # Calculate the required collateral from participants (you may have a separate function for this)
    total_required_collateral = calculate_required_collateral()

    # Calculate the operator reward (you may have a separate function for this)
    operator_reward_percentage = calculate_operator_reward()

    try:
        # Create the Masternode Registration Transaction
        mn_reg_tx = dashcore.CTransaction()

        # Add inputs, outputs, and other necessary data to the transaction
        # (This part depends on the specific structure of Dash MN registration transactions)

        # Sign the transaction with the operator's private key (not shown here)

        # Serialize the transaction
        serialized_mn_reg_tx = mn_reg_tx.serialize().hex()

        # Send the transaction to the Dash network
        result = rpc_connection.sendrawtransaction(serialized_mn_reg_tx)

        if result:
            print("Masternode Registration Transaction created and sent successfully.")
            print(f"Transaction ID: {result}")

            # Update masternode status
            masternode_status['protx_hash'] = calculate_protx_hash(serialized_mn_reg_tx)
            masternode_status['operator_pubkey'] = operator_pubkey
            masternode_status['voting_pubkey'] = voting_pubkey
            masternode_status['operator_reward'] = operator_reward_percentage

            print("Masternode successfully registered!")
        else:
            print("Failed to send the transaction.")
    except Exception as e:
        print(f"An error occurred: {str(e)}")

# Function to check total operator rewards accumulated (Participant)
def check_operator_rewards():
    global masternode_status
    if 'operator_reward' in masternode_status:
        print(f"Total Operator Rewards Accumulated: {masternode_status['operator_reward']} DASH")
    else:
        print("Operator rewards information not available.")

# Function to check participant's masternode status (Participant)
def check_participant_masternode_status():
    global masternode_status
    if 'protx_hash' in masternode_status and 'participants' in masternode_status:
        participant_pubkey = input("Enter your participant public key: ")
        for participant in masternode_status['participants']:
            if participant['pubkey'] == participant_pubkey:
                try:
                    mn_info = rpc_connection.protx_info(masternode_status['protx_hash'])
                    if 'proTxHash' in mn_info:
                        print(f"Participant {participant_pubkey} Status:")
                        print(f" - Registered: Yes")
                        print(f" - ProRegTx Hash: {masternode_status['protx_hash']}")
                        print(f" - Collateral: {participant['collateral']} DASH")
                        print(f" - Confirmations: {mn_info['confirmations']}")
                        print(f" - Operator Reward: {masternode_status['operator_reward']}%")
                    else:
                        print(f"Participant {participant_pubkey} Status:")
                        print(f" - Registered: No")
                    break
                except Exception as e:
                    print(f"Error checking participant's masternode status: {str(e)}")
                    break
        else:
            print("Participant not found in masternode.")
    else:
        print("Masternode status not available.")

# Function to check participant's rewards (Participant)
def check_participant_rewards():
    global masternode_status
    if 'protx_hash' in masternode_status and 'participants' in masternode_status:
        participant_pubkey = input("Enter your participant public key: ")
        for participant in masternode_status['participants']:
            if participant['pubkey'] == participant_pubkey:
                try:
                    mn_info = rpc_connection.protx_info(masternode_status['protx_hash'])
                    if 'proTxHash' in mn_info:
                        print(f"Participant {participant_pubkey} Rewards:")
                        rewards = rpc_connection.protx_get_payment_votes(masternode_status['protx_hash'])
                        for reward in rewards:
                            if reward['voterAddress'] == participant['address']:
                                print(f" - Payment Cycle: {reward['cycle']}")
                                print(f" - Payment Amount: {reward['paymentAmount']} DASH")
                        break
                    else:
                        print(f"Participant {participant_pubkey} Rewards:")
                        print(f" - Registered: No")
                        break
                catch Exception as e:
                    print(f"Error checking participant's rewards: {str(e)}")
                    break
        else:
            print("Participant not found in masternode.")
    else:
        print("Masternode status not available.")

# Function to redeem participant's rewards (Participant)
def redeem_participant_rewards():
    global masternode_status
    if 'protx_hash' in masternode_status and 'participants' in masternode_status:
        participant_pubkey = input("Enter your participant public key: ")
        for participant in masternode_status['participants']:
            if participant['pubkey'] == participant_pubkey:
                try:
                    mn_info = rpc_connection.protx_info(masternode_status['protx_hash'])
                    if 'proTxHash' in mn_info:
                        rewards = rpc_connection.protx_get_payment_votes(masternode_status['protx_hash'])
                        for reward in rewards:
                            if reward['voterAddress'] == participant['address']:
                                redemption_tx = create_redemption_tx(
                                    reward['collateralHash'],
                                    reward['collateralIndex'],
                                    participant['pubkey'],
                                    reward['paymentAmount'],
                                    participant['address']
                                )
                                serialized_redemption_tx = redemption_tx.serialize().hex()
                                print(f"Redemption transaction for participant {participant_pubkey} created successfully:")
                                print(serialized_redemption_tx)
                                break
                        else:
                            print("No rewards available for redemption.")
                        break
                    else:
                        print(f"Participant {participant_pubkey} Rewards:")
                        print(f" - Registered: No")
                        break
                except Exception as e:
                    print(f"Error redeeming participant's rewards: {str(e)}")
                    break
        else:
            print("Participant not found in masternode.")
    else:
        print("Masternode status not available.")

# Function to view the current operator reward percentage (Participant/Operator)
def view_operator_reward_percentage():
    global masternode_status
    if 'operator_reward' in masternode_status:
        print(f"Current Operator Reward Percentage: {masternode_status['operator_reward']}%")

# Function to check the status of the redemption transaction (Participant)
def check_redemption_transaction_status():
    global masternode_status
    if 'operator_reward' in masternode_status:
        participant_pubkey = input("Enter your participant public key: ")
        redemption_tx_hash = input("Enter the redemption transaction hash: ")
        try:
            # Implement logic to check the status of the redemption transaction
            # For now, we assume the redemption transaction is successful (replace with actual logic)
            print(f"Redemption Transaction {redemption_tx_hash} is successful.")
        except Exception as e:
            print(f"An error occurred: {str(e)}")
    else:
        print("Operator rewards information not available.")

# Function to set operator reward percentage (Operator)
def set_operator_reward():
    global masternode_status
    new_reward_percentage = float(input("Enter the new operator reward percentage: "))
    masternode_status['operator_reward'] = new_reward_percentage
    print(f"Operator reward percentage set to {new_reward_percentage}%.")

# Function to view operator reward percentage (Participant/Operator)
def view_operator_reward():
    global masternode_status
    if 'operator_reward' in masternode_status:
        print(f"Operator Reward Percentage: {masternode_status['operator_reward']}%")

# Function to view masternode status (Participant/Operator)
def view_masternode_status():
    global masternode_status
    if 'protx_hash' in masternode_status:
        protx_info = rpc_connection.protx_info(masternode_status['protx_hash'])
        if 'proTxHash' in protx_info:
            print("Masternode Status:")
            print(f" - Registered: Yes")
            print(f" - ProRegTx Hash: {masternode_status['protx_hash']}")
            print(f" - Confirmations: {protx_info['confirmations']}")
        else:
            print("Masternode Status:")
            print(f" - Registered: No")
    else:
        print("Masternode status not available.")

# Function to monitor overall masternode status (for the operator)
def monitor_masternode_status():
    global masternode_status
    try:
        if 'protx_hash' in masternode_status:
            mn_info = rpc_connection.protx_info(masternode_status['protx_hash'])
            if 'proTxHash' in mn_info:
                print("Masternode Status:")
                print(f" - ProRegTx Hash: {masternode_status['protx_hash']}")
                print(f" - Total Collateral: {masternode_status['total_collateral']} DASH")
                print(f" - Operator Reward Percentage: {masternode_status['operator_reward']}%")
                print(f" - Confirmations: {mn_info['confirmations']}")
                print(f" - Operator Address: {mn_info['operatorAddress']}")
                print(f" - Voting Address: {mn_info['votingAddress']}")
                participants = masternode_status['participants']
                print("Participants:")
                for participant in participants:
                    print(f" - Participant Public Key: {participant['pubkey']}")
                    print(f"   - Collateral: {participant['collateral']} DASH")
                    print(f"   - Address: {participant['address']}")
            else:
                print("Masternode is not registered.")
        else:
            print("Masternode status not available.")
    except Exception as e:
        print(f"Error monitoring masternode status: {str(e)}")

# Updated Main Menu
def main_menu():
    print("\nChoose an option:")
    print("1. Deposit Collateral (Participant)")
    print("2. Check Your Collateral (Participant)")
    print("3. Combine Participants' Collateral (Operator)")
    print("4. Create Redemption Transaction (Participant)")
    print("5. Withdraw Collateral (Participant)")
    print("6. Check Confirmations (Participant)")
    print("7. Create Masternode Registration (Operator)")
    print("8. Display Masternode Status (Operator)")
    print("9. Monitor Masternode Status (Operator)")
    print("10. Set Operator Reward (Operator)")
    print("11. View Operator Reward (Participant/Operator)")
    print("12. View Masternode Status (Participant/Operator)")
    print("13. Check Participant Masternode Status (Participant)")
    print("14. Check Participant Rewards (Participant)")
    print("15. Redeem Participant Rewards (Participant)")
    print("16. View Operator Reward Percentage (Participant/Operator)")
    print("17. Check Redemption Transaction Status (Participant)")
    print("18. Check Operator Rewards (Participant)")
    print("19. Quit (Q)")

if __name__ == "__main__":
    rpc_connection = connect_to_dash_rpc()
    required_total_collateral = float(input("Enter the required total collateral for masternode setup (in DASH): "))
    multisig_address = input("Enter the multisig address for combining collateral (Operator): ")
    main_menu()
    while True:
        option = input("Select an option (1-19 or Q to quit): ").strip().lower()
        if option == '1':
            deposit_collateral()
        elif option == '2':
            check_collateral()
        elif option == '3':
            combine_participants_collateral()
        elif option == '4':
            create_redemption_transaction()
        elif option == '5':
            withdraw_collateral()
        elif option == '6':
            check_confirmations()
        elif option == '7':
            create_masternode_registration()
        elif option == '8':
            view_masternode_status()
        elif option == '9':
            monitor_masternode_status()
        elif option == '10':
            set_operator_reward()
        elif option == '11':
            view_operator_reward()
        elif option == '12':
            view_masternode_status()
        elif option == '13':
            check_participant_masternode_status()
        elif option == '14':
            check_participant_rewards()
        elif option == '15':
            redeem_participant_rewards()
        elif option == '16':
            view_operator_reward_percentage()
        elif option == '17':
            check_redemption_transaction_status()
        elif option == '18':
            check_operator_rewards()
        elif option == '19' or option == 'q':
            sys.exit()
        else:
            print("Invalid option. Please select a valid option.")
